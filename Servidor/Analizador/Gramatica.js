/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,12],$V2=[5,12],$V3=[2,9,12],$V4=[1,30],$V5=[1,29],$V6=[1,31],$V7=[1,32],$V8=[1,33],$V9=[1,34],$Va=[1,35],$Vb=[2,8,28,68,69,70,71,72],$Vc=[11,25,27],$Vd=[2,23],$Ve=[1,61],$Vf=[1,51],$Vg=[1,63],$Vh=[1,52],$Vi=[1,54],$Vj=[1,55],$Vk=[1,56],$Vl=[1,58],$Vm=[1,59],$Vn=[1,60],$Vo=[82,83,84,85,86,87,88,89],$Vp=[2,84],$Vq=[1,72],$Vr=[1,71],$Vs=[1,73],$Vt=[1,74],$Vu=[1,75],$Vv=[1,76],$Vw=[11,21,27,46,75,77,78,79,80,81,82,83,84,85,86,87,88,89],$Vx=[11,21,27,46,75,77,78,79,80,81,84,85,86,87,88,89],$Vy=[2,98],$Vz=[1,84],$VA=[1,85],$VB=[11,21,27,46,58,59,75,77,78,79,80,81,82,83,84,85,86,87,88,89],$VC=[1,86],$VD=[11,21,27,46,75,77,78,79,80,81,82,83],$VE=[2,80],$VF=[1,88],$VG=[1,89],$VH=[1,90],$VI=[1,91],$VJ=[1,92],$VK=[1,93],$VL=[1,98],$VM=[10,20,65,75,90,91,92,93,94,95],$VN=[75,77,78,79,80,81,84,85,86,87,88,89],$VO=[11,21,27,46,82,83,84,85,86,87,88,89],$VP=[1,114],$VQ=[1,129],$VR=[1,124],$VS=[1,125],$VT=[1,136],$VU=[1,135],$VV=[1,133],$VW=[1,134],$VX=[1,132],$VY=[1,130],$VZ=[1,128],$V_=[21,27],$V$=[1,146],$V01=[2,8,10,38,39,42,45,47,48,53,55,56,60,63,68,69,70,71,72],$V11=[1,156],$V21=[1,157],$V31=[1,158],$V41=[11,21],$V51=[2,101],$V61=[1,222],$V71=[1,223],$V81=[1,225],$V91=[1,229],$Va1=[8,45,47];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"INICIO":4,"EOF":5,"IMPORTC":6,"CLASSP":7,"tk_llaveDe":8,"tk_import":9,"tk_id":10,"tk_puntoycoma":11,"tk_class":12,"tk_llaveIz":13,"CUERPOCLASS":14,"CUERPOCLASS2":15,"DECLARACIONVARIABLE":16,"DECLARACIONMETODO":17,"DECLARACIONFUNCION":18,"DATETIPO":19,"tk_parentecisIz":20,"tk_parentecisDe":21,"PARAMETROSF_M":22,"ANALISISMEDIO":23,"LSTIDS":24,"tk_igual":25,"ASIGNACIONVARIABLE":26,"tk_coma":27,"tk_void":28,"ANALISISMEDIO2":29,"RETURNMETODOF":30,"METODOCALL":31,"ASIGNACIONVARIABLEPost":32,"DECLARACIONIF":33,"DECLARACIONFOR":34,"DECLARACIONWHILE":35,"DECLARACIONDOWHILE":36,"AUMENTOODISMINUCION":37,"tk_break":38,"tk_continue":39,"DECLARACIONCONSOLE":40,"DECLARACIONSWITCH":41,"tk_switch":42,"DECLARACIONSWITCH2":43,"DECLARACIONSWITCH3":44,"tk_case":45,"tk_dospuntos":46,"tk_default":47,"tk_System":48,"tk_punto":49,"tk_out":50,"tk_print":51,"tk_println":52,"tk_while":53,"CONDICIONES":54,"tk_do":55,"tk_for":56,"DENTRODEFOR":57,"tk_incremento":58,"tk_decremento":59,"tk_if":60,"DECLARACIONELSE":61,"tk_else":62,"tk_return":63,"CONDICIONES2":64,"tk_not":65,"OPERADORES":66,"COMPARADORES":67,"tk_int":68,"tk_String":69,"tk_double":70,"tk_bolean":71,"tk_char":72,"VALUES":73,"SIGNOSA":74,"tk_resta":75,"LISTLLAMADA":76,"tk_suma":77,"tk_multiplicacion":78,"tk_division":79,"tk_potencia":80,"tk_modulo":81,"tk_and":82,"tk_or":83,"tk_igualdad":84,"tk_menorigualque":85,"tk_menorque":86,"tk_mayorigualque":87,"tk_mayorque":88,"tk_distinto":89,"tk_cadena":90,"tk_true":91,"tk_false":92,"tk_entero":93,"tk_decimal":94,"tk_caracter":95,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"tk_llaveDe",9:"tk_import",10:"tk_id",11:"tk_puntoycoma",12:"tk_class",13:"tk_llaveIz",20:"tk_parentecisIz",21:"tk_parentecisDe",25:"tk_igual",27:"tk_coma",28:"tk_void",38:"tk_break",39:"tk_continue",42:"tk_switch",45:"tk_case",46:"tk_dospuntos",47:"tk_default",48:"tk_System",49:"tk_punto",50:"tk_out",51:"tk_print",52:"tk_println",53:"tk_while",55:"tk_do",56:"tk_for",58:"tk_incremento",59:"tk_decremento",60:"tk_if",62:"tk_else",63:"tk_return",65:"tk_not",68:"tk_int",69:"tk_String",70:"tk_double",71:"tk_bolean",72:"tk_char",75:"tk_resta",77:"tk_suma",78:"tk_multiplicacion",79:"tk_division",80:"tk_potencia",81:"tk_modulo",82:"tk_and",83:"tk_or",84:"tk_igualdad",85:"tk_menorigualque",86:"tk_menorque",87:"tk_mayorigualque",88:"tk_mayorque",89:"tk_distinto",90:"tk_cadena",91:"tk_true",92:"tk_false",93:"tk_entero",94:"tk_decimal",95:"tk_caracter"},
productions_: [0,[3,2],[4,2],[4,1],[4,2],[6,4],[6,3],[7,6],[7,5],[7,2],[14,2],[14,1],[15,2],[15,1],[15,1],[18,6],[18,7],[18,8],[18,7],[18,2],[16,2],[16,4],[24,3],[24,1],[17,6],[17,8],[17,7],[17,7],[17,2],[22,4],[22,2],[23,2],[23,1],[23,2],[29,1],[29,2],[29,2],[29,1],[29,2],[29,1],[29,1],[29,1],[29,2],[29,2],[29,2],[29,1],[29,1],[29,2],[41,7],[41,6],[43,2],[43,1],[44,3],[44,4],[44,2],[44,3],[40,9],[40,8],[40,9],[40,8],[35,7],[35,6],[36,9],[36,8],[34,7],[34,6],[57,5],[57,5],[37,2],[37,2],[33,6],[33,8],[33,7],[33,7],[61,4],[61,3],[61,2],[32,3],[30,2],[30,3],[54,1],[54,3],[54,2],[54,3],[64,1],[64,3],[64,3],[19,1],[19,1],[19,1],[19,1],[19,1],[26,1],[26,3],[26,2],[26,2],[26,3],[26,2],[26,1],[31,3],[31,4],[76,3],[76,1],[74,1],[74,1],[74,1],[74,1],[74,1],[74,1],[66,1],[66,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[73,1],[73,1],[73,1],[73,1],[73,1],[73,1],[73,1],[73,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
  this.$=$$[$0-1];  return [this.$,lstError]; 
break;
case 2:
 this.$= new NNodo.Nodo("Root","Root",contador++); this.$.searchNode($$[$0-1]); this.$.searchNode($$[$0]); 
break;
case 3:
 this.$= new NNodo.Nodo("Root","Root",contador++);this.$.searchNode($$[$0]);  
break;
case 4: case 9: case 19: case 28: case 33: case 47:
lstError.push(new NError.Error(contadorE++, "Sintacticp",yytext,yylloc.first_line,yylloc.first_column,"Caracter no valido en esta posicion"));
break;
case 5:
 this.$=$$[$0-3]; this.$.push(new NNodo.Nodo("Import",$$[$0-2]+" "+$$[$0-1],contador++)) 
break;
case 6:
 this.$=[]; this.$.push(new NNodo.Nodo("Import",$$[$0-2]+" "+$$[$0-1],contador++))  
break;
case 7:
 let temp = new NNodo.Nodo("class",$$[$0-4]+" "+$$[$0-3],contador++); temp.searchNode($$[$0-1]); this.$=$$[$0-5]; this.$.push(temp); 
break;
case 8:
 this.$=[]; let temp2 = new NNodo.Nodo("class",$$[$0-4]+" "+$$[$0-3],contador++); temp2.searchNode($$[$0-1]); this.$.push(temp2); 
break;
case 10: case 31: case 50:
this.$=$$[$0-1]; this.$.push($$[$0]);
break;
case 11: case 32: case 51: case 102:
this.$=[]; this.$.push($$[$0]);
break;
case 12: case 35: case 36: case 38: case 42: case 81: case 96:
this.$=$$[$0-1];
break;
case 13: case 14: case 34: case 37: case 39: case 40: case 41: case 45: case 46: case 80: case 92: case 97:
this.$=$$[$0];
break;
case 15:
this.$=new NNodo.Nodo("Funcion",$$[$0-5]+" "+$$[$0-4]+"",contador++); this.$.tipodato=$$[$0-5]; let parametrosF3=new NNodo.Nodo("Parametros","parametros",contador++);  this.$.lstNodo.push(parametrosF3);
break;
case 16:
this.$=new NNodo.Nodo("Funcion",$$[$0-6]+" "+$$[$0-5]+"",contador++); this.$.tipodato=$$[$0-6]; let parametrosF1=new NNodo.Nodo("Parametros","parametros",contador++);  parametrosF1.searchNode($$[$0-3]); this.$.lstNodo.push(parametrosF1);
break;
case 17:
this.$=new NNodo.Nodo("Funcion",$$[$0-7]+" "+$$[$0-6]+"",contador++); this.$.tipodato=$$[$0-7];  let parametrosF2=new NNodo.Nodo("Parametros","parametros",contador++);  parametrosF2.searchNode($$[$0-4]); this.$.lstNodo.push(parametrosF2); let temp5 = new NNodo.Nodo("ContenidoF","contenido",contador++); temp5.searchNode($$[$0-1]); this.$.lstNodo.push(temp5); 
break;
case 18:
this.$=new NNodo.Nodo("Funcion",$$[$0-6]+" "+$$[$0-5]+"",contador++); this.$.tipodato=$$[$0-6]; let parametrosF4=new NNodo.Nodo("Parametros","parametros",contador++); this.$.lstNodo.push(parametrosF4); let temp6 = new NNodo.Nodo("ContenidoF","contenido",contador++); temp6.searchNode($$[$0-1]); this.$.lstNodo.push(temp6);   
break;
case 20:
this.$=new NNodo.Nodo("tipoDato",$$[$0-1]+"",contador++); this.$.searchNode($$[$0]);
break;
case 21:
this.$=new NNodo.Nodo("tipoDato",$$[$0-3]+"",contador++); this.$.searchNode($$[$0-2]); this.$.addLastChildren($$[$0])
break;
case 22:
 this.$=$$[$0-2]; this.$.push(new NNodo.Nodo("ID",$$[$0]+"",contador++)); 
break;
case 23:
 this.$=[]; this.$.push(new NNodo.Nodo("ID",$$[$0]+"",contador++));  
break;
case 24:
this.$=new NNodo.Nodo("Metodo",$$[$0-4]+"",contador++); let parametrosM2=new NNodo.Nodo("Parametros","parametros",contador++);  this.$.lstNodo.push(parametrosM2);
break;
case 25:
this.$=new NNodo.Nodo("Metodo",$$[$0-6]+"",contador++); let parametrosM0=new NNodo.Nodo("Parametros","parametros",contador++);  parametrosM0.searchNode($$[$0-4]); this.$.lstNodo.push(parametrosM0) ; let temp4 = new NNodo.Nodo("ContenidoM","contenido",contador++); temp4.searchNode($$[$0-1]); this.$.lstNodo.push(temp4); 
break;
case 26:
this.$=new NNodo.Nodo("Metodo",$$[$0-5]+"",contador++); let parametrosM3=new NNodo.Nodo("Parametros","parametros",contador++);  this.$.lstNodo.push(parametrosM3); let temp3 = new NNodo.Nodo("ContenidoM","contenido",contador++); temp3.searchNode($$[$0-1]); this.$.lstNodo.push(temp3);  
break;
case 27:
this.$=new NNodo.Nodo("Metodo",$$[$0-5]+"",contador++); let parametrosM1=new NNodo.Nodo("Parametros","parametros",contador++);  parametrosM1.searchNode($$[$0-3]); this.$.lstNodo.push(parametrosM1) ;
break;
case 29:
this.$=$$[$0-3]; this.$.push(new NNodo.Nodo($$[$0-1]+"",$$[$0-1]+" "+$$[$0],contador++));
break;
case 30:
this.$=[]; this.$.push(new NNodo.Nodo($$[$0-1]+"",$$[$0-1]+" "+$$[$0],contador++));
break;
case 43:
this.$=new NNodo.Nodo("Break","break",contador++);
break;
case 44:
this.$=new NNodo.Nodo("Continue","continue",contador++);
break;
case 48:
this.$=new NNodo.Nodo("Switch","switch",contador++); this.$.lstNodo.push($$[$0-4]); let contenidoSwitch = new NNodo.Nodo("CuerpoSwitch","cuerpo",contador++); contenidoSwitch.searchNode($$[$0-1]); this.$.lstNodo.push(contenidoSwitch);
break;
case 49:
this.$=new NNodo.Nodo("Switch","switch",contador++); this.$.lstNodo.push($$[$0-3]);
break;
case 52:
this.$= new NNodo.Nodo("Case","case",contador++); let caso0 = new NNodo.Nodo("Caso","caso",contador++); caso0.lstNodo.push($$[$0-1]); this.$.lstNodo.push(caso0); 
break;
case 53:
this.$= new NNodo.Nodo("Case","case",contador++); let caso1 = new NNodo.Nodo("Caso","caso",contador++); caso1.lstNodo.push($$[$0-2]); this.$.lstNodo.push(caso1); let cuerpoCase1 = new NNodo.Nodo("CuerpoCase","cuerpo",contador++); cuerpoCase1.lstNodo.push($$[$0]); this.$.lstNodo.push(cuerpoCase1); 
break;
case 54:
this.$= new NNodo.Nodo("Default","default",contador++); 
break;
case 55:
this.$= new NNodo.Nodo("Default","default",contador++); let cuerpoCase2 = new NNodo.Nodo("CuerpoDefault","cuerpo",contador++); cuerpoCase2.lstNodo.push($$[$0]); this.$.lstNodo.push(cuerpoCase2); 
break;
case 56:
this.$ = new NNodo.Nodo("Imprimir","imprimir",contador++); this.$.lstNodo.push($$[$0-2]);
break;
case 57:
this.$ = new NNodo.Nodo("Imprimir","imprimir",contador++);
break;
case 58:
this.$ = new NNodo.Nodo("Imprimir","imprimir SaltoL",contador++); this.$.lstNodo.push($$[$0-2]);
break;
case 59:
this.$ = new NNodo.Nodo("Imprimir","imprimir SaltoL",contador++);
break;
case 60:
this.$= new NNodo.Nodo("While","while",contador++); this.$.lstNodo.push($$[$0-4]); let cuerpoWhile0 = new NNodo.Nodo("CuerpoWhile","cuerpo",contador++); cuerpoWhile0.searchNode($$[$0-1]); this.$.lstNodo.push(cuerpoWhile0);
break;
case 61:
this.$= new NNodo.Nodo("While","while",contador++); this.$.lstNodo.push($$[$0-3]);
break;
case 62:
this.$= new NNodo.Nodo("doWhile","do while",contador++); let cuerpoDoW0=new NNodo.Nodo("CuerpoDoW","cuerpo",contador++); cuerpoDoW0.searchNode($$[$0-6]); this.$.lstNodo.push(cuerpoDoW0); let whileDo = new NNodo.Nodo("whileDo","while",contador++); whileDo.lstNodo.push($$[$0-2]); this.$.lstNodo.push(whileDo); 
break;
case 63:
this.$= new NNodo.Nodo("doWhile","do while",contador++); let whileDo2 = new NNodo("whileDo","while",contador++); whileDo2.lstNodo.push($$[$0-2]); this.$.lstNodo.push(whileDo2); 
break;
case 64:
this.$ = new NNodo.Nodo("For","for",contador++); let condicionesfor = new NNodo.Nodo("condiciones","condiciones",contador++); condicionesfor.searchNode($$[$0-4]); this.$.lstNodo.push(condicionesfor); let cuerpoFor0 = new NNodo.Nodo("CuerpoFor","cuerpo",contador++); cuerpoFor0.searchNode($$[$0-1]); this.$.lstNodo.push(cuerpoFor0); 
break;
case 65:
this.$ = new NNodo.Nodo("For","for",contador++); let condicionesfor2 = new NNodo.Nodo("condiciones","condiciones",contador++); condicionesfor2.searchNode($$[$0-3]); this.$.lstNodo.push(condicionesfor2);
break;
case 66: case 67:
this.$=[]; this.$.push($$[$0-4]);this.$.push($$[$0-2]);this.$.push($$[$0]);
break;
case 68:
this.$=new NNodo.Nodo("id",$$[$0-1],contador++); this.$.lstNodo.push(new NNodo.Nodo("incremento","+1",contador++));
break;
case 69:
this.$=new NNodo.Nodo("id",$$[$0-1],contador++); this.$.lstNodo.push(new NNodo.Nodo("incremento","-1",contador++));
break;
case 70:
this.$= new NNodo.Nodo("If","if",contador++); let condiciones0= new NNodo.Nodo("condiciones","condiciones",contador++); condiciones0.lstNodo.push($$[$0-3]); this.$.lstNodo.push(condiciones0); 
break;
case 71:
this.$= new NNodo.Nodo("If","if",contador++); let condiciones1= new NNodo.Nodo("condiciones","condiciones",contador++); condiciones1.lstNodo.push($$[$0-5]); this.$.lstNodo.push(condiciones1); let cuerpoIf1 = new NNodo.Nodo("Cuerpo","cuerpo",contador++); cuerpoIf1.searchNode($$[$0-2]); this.$.lstNodo.push(cuerpoIf1); this.$.lstNodo.push($$[$0])
break;
case 72:
this.$= new NNodo.Nodo("If","if",contador++); let condiciones2= new NNodo.Nodo("condiciones","condiciones",contador++); condiciones2.lstNodo.push($$[$0-4]); this.$.lstNodo.push(condiciones2); this.$.lstNodo.push($$[$0]); 
break;
case 73:
this.$= new NNodo.Nodo("If","if",contador++); let condiciones3= new NNodo.Nodo("condiciones","condiciones",contador++); condiciones3.lstNodo.push($$[$0-4]); this.$.lstNodo.push(condiciones3); let cuerpoIf2 = new NNodo.Nodo("Cuerpo","cuerpo",contador++); cuerpoIf2.searchNode($$[$0-1]); this.$.lstNodo.push(cuerpoIf2);
break;
case 74:
this.$= new NNodo.Nodo("Else","else",contador++); this.$.searchNode($$[$0-1]);
break;
case 75:
this.$= new NNodo.Nodo("Else","else",contador++);
break;
case 76:
this.$= new NNodo.Nodo("ElseIf","else If",contador++); this.$.lstNodo.push($$[$0]);
break;
case 77:
this.$= new NNodo.Nodo("AsignacionId",$$[$0-2],contador++); this.$.lstNodo.push($$[$0]);
break;
case 78:
this.$= new NNodo.Nodo("return","return",contador++);
break;
case 79:
this.$= new NNodo.Nodo("return","return",contador++); let lstCondiciones0=[]; lstCondiciones0.push($$[$0-1]); this.$.searchNode(lstCondiciones0);
break;
case 82:
this.$= new NNodo.Nodo("Negacion","not",contador++); this.$.lstNodo.push($$[$0]);
break;
case 83:
this.$= new NNodo.Nodo("OperadorLogico",$$[$0-1],contador++); this.$.lstNodo.push($$[$0-2]); this.$.lstNodo.push($$[$0]); 
break;
case 84:
this.$= $$[$0];
break;
case 85:
 this.$=$$[$0-1];
break;
case 86:
this.$= new NNodo.Nodo("Comparacion",$$[$0-1],contador++); this.$.lstNodo.push($$[$0-2]); this.$.lstNodo.push($$[$0]);
break;
case 93:
this.$=new NNodo.Nodo("OperacionA",$$[$0-1]+"",contador++); this.$.lstNodo.push($$[$0-2]); this.$.lstNodo.push($$[$0]);
break;
case 94:
this.$=$$[$0-1]; this.$.lstNodo.push(new NNodo.Nodo("Incremento","+1",contador++));
break;
case 95:
this.$=$$[$0-1]; this.$.lstNodo.push(new NNodo.Nodo("Decremento","-1",contador++));
break;
case 99:
 this.$= new NNodo.Nodo("MetodoLlamada",$$[$0-2]+"",contador++);
break;
case 100:
 this.$= new NNodo.Nodo("MetodoLlamada",$$[$0-3]+"",contador++); this.$.searchNode($$[$0-1]);
break;
case 101:
this.$=$$[$0-2]; this.$.push($$[$0]);
break;
case 117:
 this.$ = new NNodo.Nodo("Cadena",$$[$0]+"",contador++); 
break;
case 118:
 this.$ = new NNodo.Nodo("true",$$[$0]+"",contador++); 
break;
case 119:
 this.$ = new NNodo.Nodo("false",$$[$0]+"",contador++); 
break;
case 120:
 this.$=$$[$0];
break;
case 121:
 this.$ = new NNodo.Nodo("Entero",$$[$0]+"",contador++); 
break;
case 122:
 this.$ = new NNodo.Nodo("Decimal",$$[$0]+"",contador++); 
break;
case 123:
 this.$ = new NNodo.Nodo("Caracter",$$[$0]+"",contador++); 
break;
case 124:
 this.$ = new NNodo.Nodo("Id",$$[$0]+"",contador++); 
break;
}
},
table: [{2:[1,5],3:1,4:2,6:3,7:4,9:[1,6],12:$V0},{1:[3]},{5:[1,8]},{2:[1,11],7:9,9:[1,10],12:$V0},{5:[2,3],12:$V1},{8:[1,13]},{10:[1,14]},{10:[1,15]},{1:[2,1]},{5:[2,2],12:$V1},{10:[1,16]},{8:[1,17]},{10:[1,18]},o($V2,[2,4]),{11:[1,19]},{13:[1,20]},{11:[1,21]},o($V2,[2,9]),{13:[1,22]},o($V3,[2,6]),{2:$V4,14:23,15:24,16:25,17:26,18:27,19:28,28:$V5,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va},o($V3,[2,5]),{2:$V4,14:36,15:24,16:25,17:26,18:27,19:28,28:$V5,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va},{2:$V4,8:[1,37],15:38,16:25,17:26,18:27,19:28,28:$V5,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va},o($Vb,[2,11]),{11:[1,39]},o($Vb,[2,13]),o($Vb,[2,14]),{10:[1,41],24:40},{10:[1,42]},{8:[1,43]},{10:[2,87]},{10:[2,88]},{10:[2,89]},{10:[2,90]},{10:[2,91]},{2:$V4,8:[1,44],15:38,16:25,17:26,18:27,19:28,28:$V5,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va},o($V2,[2,8]),o($Vb,[2,10]),o($Vb,[2,12]),{11:[2,20],25:[1,45],27:[1,46]},o($Vc,$Vd,{20:[1,47]}),{20:[1,48]},o($Vb,[2,28]),o($V2,[2,7]),{10:$Ve,20:$Vf,26:49,31:57,54:53,64:62,65:$Vg,73:50,75:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn},{10:[1,64]},{19:67,21:[1,65],22:66,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va},{19:67,21:[1,68],22:69,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va},o($Vo,$Vp,{74:70,11:[2,21],75:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv}),o($Vw,[2,92],{58:[1,77],59:[1,78]}),{10:$Ve,20:$Vf,26:79,31:57,54:80,64:81,65:$Vg,73:50,75:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn},{10:$Ve,20:$Vf,26:82,31:57,54:53,64:62,65:$Vg,73:50,75:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn},o($Vx,$Vy,{66:83,82:$Vz,83:$VA}),o($VB,[2,117]),o($VB,[2,118]),o($VB,[2,119]),o($VB,[2,120]),o($VB,[2,121]),o($VB,[2,122]),o($VB,[2,123]),o($VB,[2,124],{20:$VC}),o($VD,$VE,{67:87,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK}),{10:$Ve,20:$Vf,26:95,31:57,54:94,64:62,65:$Vg,73:50,75:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn},o($Vc,[2,22]),{13:[1,96]},{21:[1,97],27:$VL},{10:[1,99]},{13:[1,100]},{21:[1,101],27:$VL},{10:$Ve,20:$Vf,26:102,31:57,54:53,64:62,65:$Vg,73:50,75:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn},o($VM,[2,103]),o($VM,[2,104]),o($VM,[2,105]),o($VM,[2,106]),o($VM,[2,107]),o($VM,[2,108]),o($Vw,[2,94]),o($Vw,[2,95]),o($Vo,$Vp,{74:70,21:[1,103],75:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv}),o($VN,$Vy,{66:83,21:[1,104],82:$Vz,83:$VA}),o([75,77,78,79,80,81,82,83],$VE,{67:87,21:[1,105],84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK}),o($VO,[2,97],{74:70,75:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv}),{10:$Ve,20:$Vf,26:95,31:57,54:106,64:62,65:$Vg,73:50,75:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn},o($VM,[2,109]),o($VM,[2,110]),{10:$Ve,20:$Vf,21:[1,107],26:109,31:57,54:53,64:62,65:$Vg,73:50,75:$Vh,76:108,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn},{10:$Ve,20:$Vf,26:95,31:57,54:53,64:110,65:$Vg,73:50,75:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn},o($VM,[2,111]),o($VM,[2,112]),o($VM,[2,113]),o($VM,[2,114]),o($VM,[2,115]),o($VM,[2,116]),o($Vx,[2,82],{66:83,82:$Vz,83:$VA}),o($VO,$Vp,{74:70,75:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv}),{2:$VP,8:[1,111],10:$VQ,16:119,19:131,23:112,29:113,30:115,31:116,32:117,33:118,34:120,35:121,36:122,37:123,38:$VR,39:$VS,40:126,41:127,42:$VT,48:$VU,53:$VV,55:$VW,56:$VX,60:$VY,63:$VZ,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va},{13:[1,137]},{19:138,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va},o($V_,[2,30]),{2:$VP,8:[1,139],10:$VQ,16:119,19:131,23:140,29:113,30:115,31:116,32:117,33:118,34:120,35:121,36:122,37:123,38:$VR,39:$VS,40:126,41:127,42:$VT,48:$VU,53:$VV,55:$VW,56:$VX,60:$VY,63:$VZ,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va},{13:[1,141]},o($VO,[2,93],{74:70,75:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv}),o($Vw,[2,96]),o($Vw,[2,81]),o($Vw,[2,85]),o($Vx,[2,83],{66:83,82:$Vz,83:$VA}),o($VB,[2,99]),{21:[1,142],27:[1,143]},o([21,27,82,83,84,85,86,87,88,89],[2,102],{74:70,75:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv}),o($VD,[2,86],{67:87,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK}),o($Vb,[2,15]),{2:$V$,8:[1,144],10:$VQ,16:119,19:131,29:145,30:115,31:116,32:117,33:118,34:120,35:121,36:122,37:123,38:$VR,39:$VS,40:126,41:127,42:$VT,48:$VU,53:$VV,55:$VW,56:$VX,60:$VY,63:$VZ,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va},o($V01,[2,32]),{8:[1,147]},o($V01,[2,34]),{11:[1,148]},{11:[1,149]},o($V01,[2,37]),{11:[1,150]},o($V01,[2,39]),o($V01,[2,40]),o($V01,[2,41]),{11:[1,151]},{11:[1,152]},{11:[1,153]},o($V01,[2,45]),o($V01,[2,46]),{10:$Ve,11:[1,154],20:$Vf,26:95,31:57,54:155,64:62,65:$Vg,73:50,75:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn},{20:$VC,25:$V11,58:$V21,59:$V31},{20:[1,159]},{10:[1,160],24:40},{20:[1,161]},{20:[1,162]},{13:[1,163]},{49:[1,164]},{20:[1,165]},{2:$VP,8:[1,166],10:$VQ,16:119,19:131,23:167,29:113,30:115,31:116,32:117,33:118,34:120,35:121,36:122,37:123,38:$VR,39:$VS,40:126,41:127,42:$VT,48:$VU,53:$VV,55:$VW,56:$VX,60:$VY,63:$VZ,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va},{10:[1,168]},o($Vb,[2,24]),{2:$V$,8:[1,169],10:$VQ,16:119,19:131,29:145,30:115,31:116,32:117,33:118,34:120,35:121,36:122,37:123,38:$VR,39:$VS,40:126,41:127,42:$VT,48:$VU,53:$VV,55:$VW,56:$VX,60:$VY,63:$VZ,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va},{2:$VP,8:[1,171],10:$VQ,16:119,19:131,23:170,29:113,30:115,31:116,32:117,33:118,34:120,35:121,36:122,37:123,38:$VR,39:$VS,40:126,41:127,42:$VT,48:$VU,53:$VV,55:$VW,56:$VX,60:$VY,63:$VZ,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va},o($VB,[2,100]),{10:$Ve,20:$Vf,26:172,31:57,54:53,64:62,65:$Vg,73:50,75:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn},o($Vb,[2,18]),o($V01,[2,31]),{8:[1,173]},o($V01,[2,33]),o($V01,[2,35]),o($V01,[2,36]),o($V01,[2,38]),o($V01,[2,42]),o($V01,[2,43]),o($V01,[2,44]),o($V01,[2,78]),o($VN,$Vy,{66:83,11:[1,174],82:$Vz,83:$VA}),{10:$Ve,20:$Vf,26:175,31:57,54:53,64:62,65:$Vg,73:50,75:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn},o($V41,[2,68]),o($V41,[2,69]),{10:$Ve,20:$Vf,26:95,31:57,54:176,64:62,65:$Vg,73:50,75:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn},o($Vc,$Vd),{10:[1,180],16:179,19:131,32:178,57:177,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va},{10:$Ve,20:$Vf,26:95,31:57,54:181,64:62,65:$Vg,73:50,75:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn},{2:$VP,8:[1,183],10:$VQ,16:119,19:131,23:182,29:113,30:115,31:116,32:117,33:118,34:120,35:121,36:122,37:123,38:$VR,39:$VS,40:126,41:127,42:$VT,48:$VU,53:$VV,55:$VW,56:$VX,60:$VY,63:$VZ,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va},{50:[1,184]},{10:$Ve,20:$Vf,26:185,31:57,54:53,64:62,65:$Vg,73:50,75:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn},o($Vb,[2,16]),{2:$V$,8:[1,186],10:$VQ,16:119,19:131,29:145,30:115,31:116,32:117,33:118,34:120,35:121,36:122,37:123,38:$VR,39:$VS,40:126,41:127,42:$VT,48:$VU,53:$VV,55:$VW,56:$VX,60:$VY,63:$VZ,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va},o($V_,[2,29]),o($Vb,[2,26]),{2:$V$,8:[1,187],10:$VQ,16:119,19:131,29:145,30:115,31:116,32:117,33:118,34:120,35:121,36:122,37:123,38:$VR,39:$VS,40:126,41:127,42:$VT,48:$VU,53:$VV,55:$VW,56:$VX,60:$VY,63:$VZ,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va},o($Vb,[2,27]),o($Vo,$Vp,{74:70,21:$V51,27:$V51,75:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv}),o($V01,[2,47]),o($V01,[2,79]),o($Vo,$Vp,{74:70,11:[2,77],75:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv}),o($VN,$Vy,{66:83,21:[1,188],82:$Vz,83:$VA}),{21:[1,189]},{11:[1,190]},{11:[1,191]},{25:$V11},o($VN,$Vy,{66:83,21:[1,192],82:$Vz,83:$VA}),{2:$V$,8:[1,193],10:$VQ,16:119,19:131,29:145,30:115,31:116,32:117,33:118,34:120,35:121,36:122,37:123,38:$VR,39:$VS,40:126,41:127,42:$VT,48:$VU,53:$VV,55:$VW,56:$VX,60:$VY,63:$VZ,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va},{53:[1,194]},{49:[1,195]},o($Vo,$Vp,{74:70,21:[1,196],75:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv}),o($Vb,[2,17]),o($Vb,[2,25]),{13:[1,197]},{13:[1,198]},{10:$Ve,20:$Vf,26:95,31:57,54:199,64:62,65:$Vg,73:50,75:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn},{10:$Ve,20:$Vf,26:95,31:57,54:200,64:62,65:$Vg,73:50,75:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn},{13:[1,201]},{53:[1,202]},{20:[1,203]},{51:[1,204],52:[1,205]},{13:[1,206]},{2:$VP,8:[1,207],10:$VQ,16:119,19:131,23:208,29:113,30:115,31:116,32:117,33:118,34:120,35:121,36:122,37:123,38:$VR,39:$VS,40:126,41:127,42:$VT,48:$VU,53:$VV,55:$VW,56:$VX,60:$VY,63:$VZ,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va},{2:$VP,8:[1,210],10:$VQ,16:119,19:131,23:209,29:113,30:115,31:116,32:117,33:118,34:120,35:121,36:122,37:123,38:$VR,39:$VS,40:126,41:127,42:$VT,48:$VU,53:$VV,55:$VW,56:$VX,60:$VY,63:$VZ,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va},o($VN,$Vy,{66:83,11:[1,211],82:$Vz,83:$VA}),o($VN,$Vy,{66:83,11:[1,212],82:$Vz,83:$VA}),{2:$VP,8:[1,214],10:$VQ,16:119,19:131,23:213,29:113,30:115,31:116,32:117,33:118,34:120,35:121,36:122,37:123,38:$VR,39:$VS,40:126,41:127,42:$VT,48:$VU,53:$VV,55:$VW,56:$VX,60:$VY,63:$VZ,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va},{20:[1,215]},{10:$Ve,20:$Vf,26:95,31:57,54:216,64:62,65:$Vg,73:50,75:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn},{20:[1,217]},{20:[1,218]},{8:[1,220],43:219,44:221,45:$V61,47:$V71},o($V01,[2,70],{61:224,62:$V81}),{2:$V$,8:[1,226],10:$VQ,16:119,19:131,29:145,30:115,31:116,32:117,33:118,34:120,35:121,36:122,37:123,38:$VR,39:$VS,40:126,41:127,42:$VT,48:$VU,53:$VV,55:$VW,56:$VX,60:$VY,63:$VZ,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va},{2:$V$,8:[1,227],10:$VQ,16:119,19:131,29:145,30:115,31:116,32:117,33:118,34:120,35:121,36:122,37:123,38:$VR,39:$VS,40:126,41:127,42:$VT,48:$VU,53:$VV,55:$VW,56:$VX,60:$VY,63:$VZ,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va},o($V01,[2,65]),{10:$V91,37:228},{10:$V91,37:230},{2:$V$,8:[1,231],10:$VQ,16:119,19:131,29:145,30:115,31:116,32:117,33:118,34:120,35:121,36:122,37:123,38:$VR,39:$VS,40:126,41:127,42:$VT,48:$VU,53:$VV,55:$VW,56:$VX,60:$VY,63:$VZ,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va},o($V01,[2,61]),{10:$Ve,20:$Vf,26:95,31:57,54:232,64:62,65:$Vg,73:50,75:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn},o($VN,$Vy,{66:83,21:[1,233],82:$Vz,83:$VA}),{10:$Ve,20:$Vf,21:[1,235],26:234,31:57,54:53,64:62,65:$Vg,73:50,75:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn},{10:$Ve,20:$Vf,21:[1,237],26:236,31:57,54:53,64:62,65:$Vg,73:50,75:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn},{8:[1,238],44:239,45:$V61,47:$V71},o($V01,[2,49]),o($Va1,[2,51]),{10:$Ve,20:$Vf,26:240,31:57,54:53,64:62,65:$Vg,73:50,75:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn},{46:[1,241]},o($V01,[2,72]),{13:[1,242],33:243,60:$VY},o($V01,[2,73],{61:244,62:$V81}),o($V01,[2,64]),{21:[2,66]},{58:$V21,59:$V31},{21:[2,67]},o($V01,[2,60]),o($VN,$Vy,{66:83,21:[1,245],82:$Vz,83:$VA}),{11:[1,246]},o($Vo,$Vp,{74:70,21:[1,247],75:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv}),{11:[1,248]},o($Vo,$Vp,{74:70,21:[1,249],75:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv}),{11:[1,250]},o($V01,[2,48]),o($Va1,[2,50]),o($Vo,$Vp,{74:70,46:[1,251],75:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv}),o($Va1,[2,54],{29:113,30:115,31:116,32:117,33:118,16:119,34:120,35:121,36:122,37:123,40:126,41:127,19:131,23:252,2:$VP,10:$VQ,38:$VR,39:$VS,42:$VT,48:$VU,53:$VV,55:$VW,56:$VX,60:$VY,63:$VZ,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va}),{2:$VP,8:[1,254],10:$VQ,16:119,19:131,23:253,29:113,30:115,31:116,32:117,33:118,34:120,35:121,36:122,37:123,38:$VR,39:$VS,40:126,41:127,42:$VT,48:$VU,53:$VV,55:$VW,56:$VX,60:$VY,63:$VZ,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va},o($V01,[2,76]),o($V01,[2,71]),{11:[1,255]},o($V01,[2,63]),{11:[1,256]},o($V01,[2,57]),{11:[1,257]},o($V01,[2,59]),o($Va1,[2,52],{29:113,30:115,31:116,32:117,33:118,16:119,34:120,35:121,36:122,37:123,40:126,41:127,19:131,23:258,2:$VP,10:$VQ,38:$VR,39:$VS,42:$VT,48:$VU,53:$VV,55:$VW,56:$VX,60:$VY,63:$VZ,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va}),o($Va1,[2,55],{30:115,31:116,32:117,33:118,16:119,34:120,35:121,36:122,37:123,40:126,41:127,19:131,29:145,2:$V$,10:$VQ,38:$VR,39:$VS,42:$VT,48:$VU,53:$VV,55:$VW,56:$VX,60:$VY,63:$VZ,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va}),{2:$V$,8:[1,259],10:$VQ,16:119,19:131,29:145,30:115,31:116,32:117,33:118,34:120,35:121,36:122,37:123,38:$VR,39:$VS,40:126,41:127,42:$VT,48:$VU,53:$VV,55:$VW,56:$VX,60:$VY,63:$VZ,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va},o($V01,[2,75]),o($V01,[2,62]),o($V01,[2,56]),o($V01,[2,58]),o($Va1,[2,53],{30:115,31:116,32:117,33:118,16:119,34:120,35:121,36:122,37:123,40:126,41:127,19:131,29:145,2:$V$,10:$VQ,38:$VR,39:$VS,42:$VT,48:$VU,53:$VV,55:$VW,56:$VX,60:$VY,63:$VZ,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va}),o($V01,[2,74])],
defaultActions: {8:[2,1],31:[2,87],32:[2,88],33:[2,89],34:[2,90],35:[2,91],228:[2,66],230:[2,67]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    let NNodo=require('../Arbol/Nodo');
    let NError= require('../Arbol/Error');
    let NFError= require('../Arbol/PError');
    let lstError= new Array();
    let contador=0;
    let contadorE=0;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:return 58
break;
case 3:return 59
break;
case 4:return 78
break;
case 5:return 79
break;
case 6:return 75
break;
case 7:return 77
break;
case 8:return 81;
break;
case 9:return 80;
break;
case 10:return 13;
break;
case 11:return 8;
break;
case 12:return 82;
break;
case 13:return 83;
break;
case 14:return 65
break;
case 15:return 89;
break;
case 16:return 84;
break;
case 17:return 25
break;
case 18:return 87;
break;
case 19:return 85;
break;
case 20:return 88;
break;
case 21:return 86;
break;
case 22:return 'tk_corcheteIz';
break;
case 23:return 'tk_corcheteDe';
break;
case 24:return 46;
break;
case 25:return 11;
break;
case 26:return 20;
break;
case 27:return 21;
break;
case 28:return 27;
break;
case 29:return 49;
break;
case 30:return 68
break;
case 31:return 70
break;
case 32:return 71
break;
case 33:return 72
break;
case 34:return 69
break;
case 35:return 91
break;
case 36:return 92
break;
case 37:return 60
break;
case 38:return 62
break;
case 39:return 42
break;
case 40:return 45
break;
case 41:return 38
break;
case 42:return 53
break;
case 43:return 55
break;
case 44:return 56
break;
case 45:return 39
break;
case 46:return 63
break;
case 47:return 9
break;
case 48:return 12
break;
case 49:return 28
break;
case 50:return 48
break;
case 51:return 50
break;
case 52:return 52
break;
case 53:return 51
break;
case 54:return 47
break;
case 55:return 90;
break;
case 56:return'tk_caracter';
break;
case 57:  return 94; 
break;
case 58:  return 93;  
break;
case 59:  return 10;  
break;
case 60: /*se ignoran*/ 
break;
case 61:  return 5;   
break;
case 62:  lstError.push(new NError.Error(contadorE++, "Lexico",yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column,"Caracter no valido"));
      console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:\+\+)/,/^(?:--)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:%)/,/^(?:\^)/,/^(?:\{)/,/^(?:\})/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:!=)/,/^(?:==)/,/^(?:=)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:;)/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:\.)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:char\b)/,/^(?:String\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:break\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:import\b)/,/^(?:class\b)/,/^(?:void\b)/,/^(?:System\b)/,/^(?:out\b)/,/^(?:println\b)/,/^(?:print\b)/,/^(?:default\b)/,/^(?:("[^"]*"))/,/^(?:('[^']'))/,/^(?:[0-9]+\.[0-9]+)/,/^(?:[0-9]+)/,/^(?:([a-zA-Z]|[_])[a-zA-Z0-9_]*)/,/^(?:[ \t\r\n\f])/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica;
exports.Parser = Gramatica.Parser;
exports.parse = function () { return Gramatica.parse.apply(Gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}